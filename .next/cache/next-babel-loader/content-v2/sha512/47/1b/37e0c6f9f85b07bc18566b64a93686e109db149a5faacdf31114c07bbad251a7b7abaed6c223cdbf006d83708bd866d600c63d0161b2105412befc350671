{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport styled from 'styled-components';\nimport Sidebar from '../../components/Sidebar';\nimport ChatScreen from '../../components/ChatScreen';\nimport { auth, db } from '../../firebase';\nimport getRecipientEmail from '../../utils/getRecipientEmail';\nimport { useAuthState } from 'react-firebase-hooks/auth';\n\nfunction Chat({\n  chat,\n  messages\n}) {\n  const [user] = useAuthState(auth);\n  return /*#__PURE__*/_jsxs(Container, {\n    children: [/*#__PURE__*/_jsx(Head, {\n      children: /*#__PURE__*/_jsxs(\"title\", {\n        children: [\"Chat with \", getRecipientEmail(chat.users, user)]\n      })\n    }), /*#__PURE__*/_jsx(Sidebar, {}), /*#__PURE__*/_jsx(ChatContainer, {\n      children: /*#__PURE__*/_jsx(ChatScreen, {\n        chat: chat,\n        messages: messages\n      })\n    })]\n  });\n}\n\nexport default Chat;\nexport async function getServerSideProps(context) {\n  const ref = db.collection(\"chats\").doc(context.query.id);\n  const messagesRes = await ref.collection(\"messages\").orderBy(\"timestamp\", \"asc\").get();\n  const messages = messagesRes.docs.map(doc => _objectSpread({\n    id: doc.id\n  }, doc.data())).map(messages => _objectSpread(_objectSpread({}, messages), {}, {\n    timestamp: messages.timestamp.toDate().getTime()\n  })); //PREP ThE Chats\n\n  const chatRes = await ref.get();\n\n  const chat = _objectSpread({\n    id: chatRes.id\n  }, chatRes.data());\n\n  return {\n    props: {\n      messages: JSON.stringify(messages),\n      chat: chat\n    }\n  };\n}\nconst Container = styled.div.attrs({\n  className: \"flex\"\n})``;\nconst ChatContainer = styled.div.attrs({\n  className: \"flex-1 h-full\"\n})``;","map":null,"metadata":{},"sourceType":"module"}